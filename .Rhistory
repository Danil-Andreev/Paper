library(openxlsx)
library(dplyr)
library(stringr)
library(EviewsR)
library(lmtest)
library(forecast) #tsdisplay
dfWrk <- read.csv("dataWrk.csv")
mdlNPL <- lm(data=dfWrk, logNPLa~logSID+R+logNGDP+bvQ1+bvQ2+bvQ3)
### Testing model for problems
library(normtest)
library(car)
library(lmtest)
testing.model <- function(model) {
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dfWrk <- read.csv("dataWrk.csv")
tsWrk <- ts(data = dfWrk, start = c(2008, 4), frequency = 4)
mdlNPL <- lm(data=dfWrk, logNPLa~logSID+R+logNGDP+bvQ1+bvQ2+bvQ3)
mdlNPLDan <- dynlm(data = dfWrk, log(NPLa) ~ indexPayment + UNEMPL + log(SID) + log(NGDP) + DR + log(L(NPLa)))
library(openxlsx)
library(dplyr)
library(stringr)
library(EviewsR)
library(lmtest)
library(forecast) #tsdisplay
library(dynlm)
library(Metrics)
mdlNPLDan <- dynlm(data = dfWrk, log(NPLa) ~ indexPayment + UNEMPL + log(SID) + log(NGDP) + DR + log(L(NPLa)))
mdlNPLDan <- dynlm(data = dfWrk, log(diff(NPLa)) ~ UNEMPL + INFL + bvCrisis)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
# For BS
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
git merge --abort
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
