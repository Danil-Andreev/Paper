BOB <- zoo(dataKG[[ie]])
BOB <- na.approx(BOB)
dataKG[[ie]] = c(rep(NA, 19), coredata(BOB), rep(NA, 4))
}
rm(BOB, ie)
# indexInstitute
INST_PCA = prcomp(dataKG[20:84, 8:13], scale = F, center = F)
dataKG$indexInstitute = c(rep(NA, 19), INST_PCA$x[,1], rep(NA, 4))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"),
main="indexInstitute (PC1) KG")
# indexBureau
INST_PCA = prcomp(dataKG[20:84, 8:13], scale = F, center = T)
dataKG$indexBureau = c(rep(NA, 19), INST_PCA$x[,2], rep(NA, 4))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"),
main="indexBureau (PC2) KG")
# indexPayment
payData <- data.frame(dataKG$ALLCARDS[32:84],
dataKG$TERMIN1[32:84], dataKG$ATM[32:84])
colnames(payData) <- c("AllCards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
dataKG$indexPayment = c(rep(NA, 31), PAY_PCA$x[,1], rep(NA, 4))
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"),
main="indexPayment (PC1) KG")
# indexDemocracy
democData <- data.frame(dataKG$GE[28:84], dataKG$PV[28:84], dataKG$RL[28:84],
dataKG$VA[28:84])
colnames(democData) <- c("GE", "PV" , "RL", "VA")
INST_PCA = prcomp(democData,center = T, scale = T)
dataKG$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1], rep(NA, 4))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"),
main="indexDemocracy (PC1) KG")
rm(INST_PCA, PAY_PCA)
dfM <- read.xlsx("dataKG.xlsx", sheet="dataM", detectDates = T)
dfQ <- dataKG
dfQ <- dfQ[1:86, ]
rm(dataKG)
# choose columns from quarterly data
names = c("Date", "NGDP", "WSGDP", "Tax", "DCPS", "AGRO", "GREV",
"GEXP", "indexInstitute", "indexBureau", "indexPayment",
"NPLa", "NPLp", "SID", "Unempl")
dfAll <- dfQ[, names]
rm(names)
# determ. seasonal (Q) components
dfAll$bvQ1 <- 0
dfAll$bvQ2 <- 0
dfAll$bvQ3 <- 0
for(i in 1:nrow(dfAll)){
lstch <- str_sub(dfAll$Date[i], start = -1)
if(lstch=="1"){dfAll$bvQ1[i] <- 1}
if(lstch=="2"){dfAll$bvQ2[i] <- 1}
if(lstch=="3"){dfAll$bvQ3[i] <- 1}
} # end for i
# Row of date as year.qtr format
dfAll$Date <- as.yearqtr(dfAll$Date, format = "%Y-%q")
idxQe <- seq(from=4, to=259, by=3)
# M2
dfAll$M2 <- dfM$M2[idxQe]
# M1
dfAll$M1 <- dfM$M2[idxQe]
# M0
dfAll$M0 <- dfM$M0[idxQe]
# CH
dfAll$CH <- dfM$CH[idxQe]
#DR
dfAll$DR <- dfM$DR[idxQe]
# CM
dfAll$CM <- dfAll$M0*100/dfAll$M2
# volume of taxes
dfAll$vTax <- dfQ$Tax*dfQ$NGDP/100
dfWrk <- na.omit(dfAll)
write.csv(dfWrk, file="dataKG.csv", row.names = F, quote = F)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
library(MLmetrics)
options(scipen=4)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
# Adjust randomness
set.seed(1234)
# Upgrade initial OLS formula to copula
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
gc()
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
library(MLmetrics)
options(scipen=4)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
formula <- NPLp~LUNEMPL+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
# Adjust randomness
set.seed(1234)
# Upgrade initial OLS formula to copula
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplRF <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataRF)
summary(cplRF)
#testing.model(cplRF)
#cat("MAPE: ", MAPE(y_true = dataRF$NPLp, y_pred = cplRF$fitted.values),fill = T)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
formula <- NPLp~NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlKZ <- lm(data=dataKZ, formula = formula)
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlKZ <- lm(data=dataKZ, formula = formula)
summary(mdlKZ)
testing.model(mdlKZ)
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlKZ <- lm(data=dataKZ, formula = formula)
summary(mdlKZ)
testing.model(mdlKZ)
set.seed(1234)
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplKZ <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataKZ)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
dataRB <- read_csv("C://R//Data//PaperGit//Paper//dataRB.csv", col_types = cols(Date = col_character()))
dataRB$perSIDinNGDP <- dataRB$SID*100/dataRB$NGDP
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
View(dataRB)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
dataRB <- read_csv("C://R//Data//PaperGit//Paper//dataRB.csv", col_types = cols(Date = col_character()))
dataRB$perSIDinNGDP <- dataRB$SID*100/dataRB$NGDP
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
dataRB <- read_csv("C://R//Data//PaperGit//Paper//dataRB.csv", col_types = cols(Date = col_character()))
dataRB$perSIDinNGDP <- dataRB$SID*100/dataRB$NGDP
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment
mdlRB <- lm(data=dataRB, formula = formula)
summary(mdlRB)
testing.model(mdlRB)
gc()
dataRB <- read_csv("C://R//Data//PaperGit//Paper//dataRB.csv", col_types = cols(Date = col_character()))
dataRB$perSIDinNGDP <- dataRB$SID*100/dataRB$NGDP
dataRB$LNPLp <- c(1.09, dataRB$NPLp[-45])
dataRB <- read_csv("C://R//Data//PaperGit//Paper//dataRB.csv", col_types = cols(Date = col_character()))
dataRB$perSIDinNGDP <- dataRB$SID*100/dataRB$NGDP
dataRB$LNPLp <- c(1.09, dataRB$NPLp[-45])
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment+ LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
summary(mdlRB)
testing.model(mdlRB)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
library(MLmetrics)
options(scipen=4)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment+ LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
summary(mdlRB)
testing.model(mdlRB)
vif(mdlRB)
formula <- NPLp ~ iloUnempl + perSIDinNGDP + indexInstitute + indexPayment+ LNPLp
mdlRB <- lm(data=dataRB, formula = formula)
summary(mdlRB)
testing.model(mdlRB)
vif(mdlRB)
colnames(dataRB)
formula <- NPLp~LUNEMPL+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
formula <- NPLp~LUNEMPL+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
formula <- NPLp~UNEMPL+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
formula <- NPLp~UNEMPL + I(UNEMPL^2)+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
formula <- NPLp~UNEMPL + I(UNEMPL^2)+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
# Adjust randomness
set.seed(1234)
# Upgrade initial OLS formula to copula
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplRF <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataRF)
summary(cplRF)
#testing.model(cplRF)
#cat("MAPE: ", MAPE(y_true = dataRF$NPLp, y_pred = cplRF$fitted.values),fill = T)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp + + bvQ1 + bvQ2 +bvQ3
mdlKZ <- lm(data=dataKZ, formula = formula)
View(dataKZ)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp + + bvQ1 + bvQ2 +bvQ3
mdlKZ <- lm(data=dataKZ, formula = formula)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
View(dataKZ)
gc()
gc()
dataKZ <- read_excel("dataKZ.xlsx", sheet = "dataQ")
dataKZ$CH <- c(rep(NA, 27), coredata(na.approx(zoo(dataKZ$CH[28:60]))), dataKZ$CH[61:85], rep(NA, 2))
for (ie in colnames(dataKZ)[9:14]){
BOB <- zoo(dataKZ[[ie]])
BOB <- na.approx(BOB)
dataKZ[[ie]] = c(rep(NA, 3), coredata(BOB), rep(NA, 3))
}
dataKZ$GREV <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GREV[4:84])))/4, rep(NA, 3))
dataKZ$GEXP <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GEXP[4:84])))/4, rep(NA, 3))
for (ie in colnames(dataKZ)[30:31]){
BOB <- zoo(dataKZ[[ie]])
BOB <- na.approx(BOB)
dataKZ[[ie]] = c(rep(NA, 27), coredata(BOB))
}
dataKZ$GI <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GI[4:87]))))
# indexInstitute
INST_PCA = prcomp(dataKZ[4:84, 9:14], scale = F, center = F)
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"),
main="indexInstitute (PC1) KZ")
dataKZ$indexInstitute = c(rep(NA, 3), INST_PCA$x[,1], rep(NA, 3))
# indexBureau
INST_PCA = prcomp(dataKZ[4:84, 9:14], scale = F, center = T)
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), main="indexBureau (PC2) KZ")
dataKZ$indexBureau = c(rep(NA, 3), INST_PCA$x[,2], rep(NA, 3))
# indexPayment
payData <- data.frame(dataKZ$ALLCARDS[20:86],dataKZ$TERMIN1[20:86], dataKZ$ATM[20:86])
colnames(payData) <- c("AllCards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"),
main="indexPayment (PC1) KZ")
dataKZ$indexPayment = c(rep(NA, 19), PAY_PCA$x[,1], rep(NA, 1))
rm(payData)
# indexDemocracy
democData <- data.frame(dataKZ$GE[28:84], dataKZ$PV[28:84], dataKZ$RL[28:84],
dataKZ$VA[28:84])
colnames(democData) <- c("GE", "PV" , "RL", "VA")
INST_PCA = prcomp(democData, center = T, scale = T)
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"),
main="indexDemocracy (PC1) KZ")
dataKZ$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1], rep(NA, 3))
rm(democData)
dfM <- read.xlsx("dataKZ.xlsx", sheet="dataM", detectDates = T)
dfQ <- dataKZ
dfQ <- dfQ[1:87, ]
# choose columns from quarterly data
names = c("Date", "NGDP", "WSGDP", "COFS", "Slr", "AGRO", "GREV",
"GEXP", "taxProfit", "CH", "SID", "SED", "NPLa", "NPLp",
"indexInstitute", "indexBureau",
"indexPayment", "indexDemocracy", "Unempl", "INFL", "RealInc")
dfAll <- dfQ[, names]
rm(names)
# determ. seasonal (Q) components
dfAll$bvQ1 <- 0
dfAll$bvQ2 <- 0
dfAll$bvQ3 <- 0
for(i in 1:nrow(dfAll)){
lstch <- str_sub(dfAll$Date[i], start = -1)
if(lstch=="1"){dfAll$bvQ1[i] <- 1}
if(lstch=="2"){dfAll$bvQ2[i] <- 1}
if(lstch=="3"){dfAll$bvQ3[i] <- 1}
} # end for i
View(dfAll)
idxQe <- seq(from=4, to=259, by=3)
# M2
dfAll$M2 <- c(dfM$M2[idxQe], NA)
# M0
dfAll$M0 <- c(dfM$M0[idxQe], NA)
# DR
dfAll$DR <- c(dfM$DR[idxQe], NA)
# CM
dfAll$CM <- dfQ$COFS*100/dfM$M2[idxQe]
# Tax
dfAll$Tax <- dfAll$taxProfit*100/dfAll$NGDP
dfWrk <- na.omit(dfAll)
View(dfWrk)
write.csv(dfWrk, file="dataKZ.csv", row.names = F, quote = F)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
View(dataKZ)
dataKZ <- read_csv("dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ <- read_csv("dataKZ.csv", col_types = cols(Date = col_character()))
View(dataKZ)
source("C:/R/Data/PaperGit/Paper/dataRecoded.r", echo=TRUE)
dataKZ <- read_csv("dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp + + bvQ1 + bvQ2 +bvQ3
mdlKZ <- lm(data=dataKZ, formula = formula)
summary(mdlKZ)
testing.model(mdlKZ)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
library(MLmetrics)
options(scipen=4)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp + + bvQ1 + bvQ2 +bvQ3
mdlKZ <- lm(data=dataKZ, formula = formula)
summary(mdlKZ)
testing.model(mdlKZ)
dataRF <- read_csv("dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
View(dataRF)
dataRF <- read_csv("dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
formula <- NPLp~UNEMPL + I(UNEMPL^2)+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
# Adjust randomness
set.seed(1234)
# Upgrade initial OLS formula to copula
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplRF <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataRF)
summary(cplRF)
#testing.model(cplRF)
#cat("MAPE: ", MAPE(y_true = dataRF$NPLp, y_pred = cplRF$fitted.values),fill = T)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
formula <- NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp + + bvQ1 + bvQ2 +bvQ3
mdlKZ <- lm(data=dataKZ, formula = formula)
summary(mdlKZ)
testing.model(mdlKZ)
set.seed(1234)
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplKZ <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataKZ)
summary(cplKZ)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=cplRF$fitted.values),fill = T)
summary(cplRF)
mdlRF$coefficients
cplKZ$coefficients
View(cplRF)
cplKZ$coefficients[1]
cplKZ$coefficients[1][1]
cplKZ$coefficients[1][2]
cplKZ$coefficients[1]
?table
mdlRF$coefficients
cplKZ$coefficients
mdlRF$coefficients
cplKZ$coefficients
formula <- NPLp~UNEMPL + I(UNEMPL^2)+bvCrisis+perSIDinNGDP+indexDemocracy+indexInstitute+indexPayment+LNPLp + bvQ1 + bvQ2 +bvQ3
mdlRF <- lm(data=dataRF, formula=formula)
summary(mdlRF)
testing.model(mdlRF)
cat("MAPE: ", MAPE(y_true=dataRF$NPLp, y_pred=mdlRF$fitted.values),fill = T)
# Adjust randomness
set.seed(1234)
# Upgrade initial OLS formula to copula
formulaCPL <- formula(paste(formula[2], formula[1], formula[3],
" | continuous(perSIDinNGDP, indexPayment, indexInstitute)"))
cplRF <- copulaCorrection(formula =  formulaCPL, num.boots = 10000, data=dataRF)
summary(cplRF)
cplRF$coefficients
table(mdlRF$coefficients, cplRF$coefficients)
cplRF$coefficients
table(c(mdlRF$coefficients, rep(0,3)), cplRF$coefficients)
matrix(c(c(mdlRF$coefficients, rep(0,3)), cplRF$coefficients), ncol=2, byrow=TRUE)
matrix(c(c(mdlRF$coefficients, 0,0,0), cplRF$coefficients), ncol=2, byrow=TRUE)
matrix(c(c(mdlRF$coefficients, 0,0,0), cplRF$coefficients), ncol=2)
matrix(c(c(mdlRF$coefficients, rep(NA,3)), cplRF$coefficients), ncol=2)
cplRF$names.main.coefs
tab <- matrix(c(c(mdlRF$coefficients, rep(NA,3)), cplRF$coefficients), ncol=2)
colnames(tab) <- c("OLS", "Copula")
rownames(tab) <- cplRF$names.main.coefs
tab
tab <- matrix(c(c(mdlKZ$coefficients, rep(NA,3)), cplKZ$coefficients), ncol=2)
colnames(tab) <- c("OLS", "Copula")
rownames(tab) <- cplKZ$names.main.coefs
tab
gc()
