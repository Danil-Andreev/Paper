library(openxlsx)
library(dplyr)
library(stringr)
library(EviewsR)
library(lmtest)
library(forecast) #tsdisplay
dfWrk <- read.csv("dataWrk.csv")
mdlNPL <- lm(data=dfWrk, logNPLa~logSID+R+logNGDP+bvQ1+bvQ2+bvQ3)
### Testing model for problems
library(normtest)
library(car)
library(lmtest)
testing.model <- function(model) {
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dfWrk <- read.csv("dataWrk.csv")
tsWrk <- ts(data = dfWrk, start = c(2008, 4), frequency = 4)
mdlNPL <- lm(data=dfWrk, logNPLa~logSID+R+logNGDP+bvQ1+bvQ2+bvQ3)
mdlNPLDan <- dynlm(data = dfWrk, log(NPLa) ~ indexPayment + UNEMPL + log(SID) + log(NGDP) + DR + log(L(NPLa)))
library(openxlsx)
library(dplyr)
library(stringr)
library(EviewsR)
library(lmtest)
library(forecast) #tsdisplay
library(dynlm)
library(Metrics)
mdlNPLDan <- dynlm(data = dfWrk, log(NPLa) ~ indexPayment + UNEMPL + log(SID) + log(NGDP) + DR + log(L(NPLa)))
mdlNPLDan <- dynlm(data = dfWrk, log(diff(NPLa)) ~ UNEMPL + INFL + bvCrisis)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
# For BS
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 1000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
git merge --abort
library(readr)
library(dynlm)
library(normtest)
library(car)
library(lmtest)
library(REndo)
### Testing model for problems
testing.model <- function(model) {
cat("--==Testing model==--", fill = T)
cat(fill = T)
cat("R-squared:", summary(model)$r.squared, fill = T)
cat("Adj. R-squared:", summary(model)$adj.r.squared, fill = T)
cat("AIC: ", AIC(model), fill = T)
cat(fill = T)
cat("Normality of disturbances: ", jb.norm.test(model$residuals)$p.value, fill = T)
cat(fill = T)
cat("Multicollinearity: ", max(vif(model)), fill = T)
cat(fill = T)
cat("Heteroskedasticity: ", bptest(model)$p.value, fill = T)
cat(fill = T)
cat("Autocorrelation of 1 order: ", bgtest(model)$p.value, fill = T)
cat(fill = T)
cat("RESET-test: ", reset(model)$p.value, fill = T)
}
dataRF <- read_csv("C://R//Data//dataRF.csv", col_types = cols(Date = col_character()))
dataRF$perSIDinNGDP <- dataRF$SID*100/dataRF$NGDP
dataRF$LUNEMPL <- c(5.9, dataRF$UNEMPL[-45])
dataRF$LNPLp <- c(1.76780823887159, dataRF$NPLp[-45])
mdlRF <- lm(data=dataRF, formula = NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlRF)
testing.model(mdlRF)
# Adjust randomness
set.seed(1234)
cplRF <- copulaCorrection(formula =  NPLp ~ LUNEMPL + bvCrisis + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataRF)
options(scipen=2)
summary(cplRF)
jb.norm.test(cplRF$residuals)
acf(cplRF$residuals)
bptest(cplRF)
bgtest(cplRF, order = 2)
bptest(cplRF)
reset(cplRF)
dataKZ <- read_csv("C://R//Data//dataKZ.csv", col_types = cols(Date = col_character()))
dataKZ$perSIDinNGDP <- dataKZ$SID*100/dataKZ$NGDP
dataKZ$LUNEMPL <- c(5.5, dataKZ$Unempl[-36])
dataKZ$LNPLp <- c(14.6071858314849, dataKZ$NPLp[-36])
mdlKZ <- lm(data=dataKZ, formula = NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp)
summary(mdlKZ)
testing.model(mdlKZ)
# Adjust randomness
set.seed(1234)
cplKZ <- copulaCorrection(formula =  NPLp ~ LUNEMPL + perSIDinNGDP + indexDemocracy + indexInstitute + indexPayment + LNPLp | continuous(perSIDinNGDP, indexPayment, indexInstitute), num.boots = 10000, data=dataKZ)
options(scipen=2)
summary(cplKZ)
jb.norm.test(cplKZ$residuals)
acf(cplKZ$residuals)
bptest(cplKZ)
bgtest(cplKZ, order = 2)
bptest(cplKZ)
reset(cplKZ)
library(openxlsx)
library(dplyr)
library(stringr)
library(EviewsR)
library(lmtest)
library(forecast) #tsdisplay
library(zoo)
library(readxl)
dataRF <- read_excel("dataRF.xlsx", sheet = "dataQ")
dataRF$COFS <- dataRF$COFS/1000
dataRF$DCPS <- c(rep(NA, 7), coredata(na.approx(zoo(dataRF$DCPS[5:84]))), rep(NA, 3))
dataRF$AGRO <- c(rep(NA, 23), coredata(na.approx(zoo(dataRF$AGRO[24:84]))), rep(NA, 3))
dataRF$GREV <- c(rep(NA, 3), coredata(na.approx(zoo(dataRF$GREV[4:84]))), rep(NA, 3))
dataRF$GEXP <- c(rep(NA, 3), coredata(na.approx(zoo(dataRF$GEXP[4:84]))), rep(NA, 3))
dataRF$energyTotal <- c(rep(NA, 23), coredata(na.approx(zoo(dataRF$energyTotal[24:84]))), rep(NA, 3))
dataRF$energyPopul <- c(rep(NA, 23), coredata(na.approx(zoo(dataRF$energyPopul[24:84]))), rep(NA, 3))
dataRF$energyPrice <- c(rep(NA, 3), coredata(na.approx(zoo(dataRF$energyPrice[4:84]))), rep(NA, 3))
dataRF$PRR <- c(rep(NA, 27), coredata(na.approx(zoo(dataRF$PRR[28:80]))), rep(NA, 7))
dataRF$CLR <- c(rep(NA, 27), coredata(na.approx(zoo(dataRF$CLR[28:80]))), rep(NA, 7))
dataRF$GI <- c(rep(NA, 23), coredata(na.approx(zoo(dataRF$GI[24:80]))), rep(NA, 7))
for (ie in colnames(dataRF)[6:11]){
BOB <- zoo(dataRF[[ie]])
BOB <- na.approx(BOB)
dataRF[[ie]] = c(rep(NA, 3), coredata(BOB), rep(NA, 7))
}
rm(BOB, ie)
INST_PCA = prcomp(dataRF[4:80, 6:11], scale = F, center = F)
dataRF$indexInstitute = c(rep(NA, 3), INST_PCA$x[,1], rep(NA, 7))
biplot(INST_PCA)
biplot(INST_PCA, cex = "")
biplot(INST_PCA, xlabs = "*")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA)))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA))))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA))))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("blue", "black"))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("black", "blue"))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("black", 233f71))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("black", "#233f71"))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"), title="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"), title="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#adb9ca", "#233f71"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#c00000", "#233f71"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#c00000", "#233f71"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
# indexPayment
PAY_PCA = prcomp(data.frame(dataRF$ALLCARDS[33:85], dataRF$PAYCARDS[33:85],
dataRF$TERMIN1[33:85], dataRF$ATM[33:85]), scale = T, center = T)
dataRF$indexPayment = c(rep(NA, 32), PAY_PCA$x[,1], rep(NA, 2))
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
colnames(payData) <- c("AllCards", "Paycards", "Terminals", "ATMs")
# indexPayment
payData <- data.frame(dataRF$ALLCARDS[33:85], dataRF$PAYCARDS[33:85],
dataRF$TERMIN1[33:85], dataRF$ATM[33:85])
colnames(payData) <- c("AllCards", "Paycards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
dataRF$indexPayment = c(rep(NA, 32), PAY_PCA$x[,1], rep(NA, 2))
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
# indexPayment
payData <- data.frame(dataRF$ALLCARDS[33:85],
dataRF$TERMIN1[33:85], dataRF$ATM[33:85])
colnames(payData) <- c("AllCards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
dataRF$indexPayment = c(rep(NA, 32), PAY_PCA$x[,1], rep(NA, 2))
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
# indexInstitute
INST_PCA = prcomp(dataRF[4:80, 6:11], scale = F, center = F)
dataRF$indexInstitute = c(rep(NA, 3), INST_PCA$x[,1], rep(NA, 7))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
# indexPayment
payData <- data.frame(dataRF$ALLCARDS[33:85],
dataRF$TERMIN1[33:85], dataRF$ATM[33:85])
colnames(payData) <- c("AllCards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
dataRF$indexPayment = c(rep(NA, 32), PAY_PCA$x[,1], rep(NA, 2))
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
# indexDemocracy
INST_PCA = prcomp(data.frame(dataRF$GI[28:80], dataRF$PV[28:80], dataRF$PRR[28:80],                        dataRF$CLR[28:80], dataRF$GE[28:80]),
center = T, scale = T)
# INST_PCA = prcomp(data.frame(dataRF$PRR[28:80], dataRF$CLR[28:80]),
#                  center = F, scale = F)
dataRF$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1]*(-1), rep(NA, 7))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
# indexDemocracy
democData <- data.frame(dataRF$GI[28:80], dataRF$PV[28:80], dataRF$PRR[28:80], dataRF$CLR[28:80], dataRF$GE[28:80])
colnames(democData) <- c("GI", "PV", "PRR", "CLR", "GE")
INST_PCA = prcomp(democData,center = T, scale = T)
dataRF$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1]*(-1), rep(NA, 7))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
democData <- data.frame(dataRF$GI[28:80]*(-1), dataRF$PV[28:80]*(-1), dataRF$PRR[28:80]*(-1), dataRF$CLR[28:80]*(-1), dataRF$GE[28:80]*(-1))
colnames(democData) <- c("GI", "PV", "PRR", "CLR", "GE")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
INST_PCA = prcomp(democData,center = T, scale = T)
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
# indexDemocracy
# домножаем всё на -1, поскольку так получим PC1 как индекс демократии
democData <- data.frame(dataRF$GI[28:80]*(-1), dataRF$PV[28:80]*(-1), dataRF$PRR[28:80]*(-1), dataRF$CLR[28:80]*(-1), dataRF$GE[28:80]*(-1))
colnames(democData) <- c("GI", "PV", "PRR", "CLR", "GE")
INST_PCA = prcomp(democData,center = T, scale = T)
dataRF$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1], rep(NA, 7))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
dataKZ <- read_excel("dataKZ.xlsx", sheet = "dataQ")
dataKZ$CH <- c(rep(NA, 27), coredata(na.approx(zoo(dataKZ$CH[28:60]))), dataKZ$CH[61:85], rep(NA, 2))
for (ie in colnames(dataKZ)[9:14]){
BOB <- zoo(dataKZ[[ie]])
BOB <- na.approx(BOB)
dataKZ[[ie]] = c(rep(NA, 3), coredata(BOB), rep(NA, 7))
}
dataKZ$GREV <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GREV[4:84])))/4, rep(NA, 3))
dataKZ$GEXP <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GEXP[4:84])))/4, rep(NA, 3))
for (ie in colnames(dataKZ)[30:31]){
BOB <- zoo(dataKZ[[ie]])
BOB <- na.approx(BOB)
dataKZ[[ie]] = c(rep(NA, 27), coredata(BOB))
}
dataKZ$GI <- c(rep(NA, 3), coredata(na.approx(zoo(dataKZ$GI[4:87]))))
# indexInstitute !!!!
INST_PCA = prcomp(dataKZ[4:80, 9:14], scale = F, center = F)
biplot(INST_PCA)
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexInstitute")
# indexPayment
payData <- data.frame(dataKZ$ALLCARDS[20:86],dataKZ$TERMIN1[20:86], dataKZ$ATM[20:86])
colnames(payData) <- c("AllCards", "Terminals", "ATMs")
PAY_PCA = prcomp(payData, scale = T, center = T)
biplot(PAY_PCA)
PAY_PCA = prcomp(payData, scale = T, center = T)
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexPayment")
# indexDemocracy!!!
democData <- data.frame(dataKZ$GI[28:80], dataKZ$PV[28:80], dataKZ$PRR[28:80], dataKZ$GE[28:80])
colnames(democData) <- c("GI", "PV", "PRR","GE")
INST_PCA = prcomp(democData, center = T, scale = T)
biplot(PAY_PCA, xlabs = c(rep("*", nrow(PAY_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
# indexDemocracy
# домножаем всё на -1, поскольку так получим PC1 как индекс демократии
democData <- data.frame(dataRF$GI[28:80]*(-1), dataRF$PV[28:80]*(-1), dataRF$PRR[28:80]*(-1), dataRF$CLR[28:80]*(-1), dataRF$GE[28:80]*(-1))
colnames(democData) <- c("GI", "PV", "PRR", "CLR", "GE")
INST_PCA = prcomp(democData,center = T, scale = T)
dataRF$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1], rep(NA, 7))
# indexDemocracy
# домножаем всё на -1, поскольку так получим PC1 как индекс демократии
# democData <- data.frame(dataRF$GI[28:80]*(-1), dataRF$PV[28:80]*(-1), dataRF$PRR[28:80]*(-1), dataRF$CLR[28:80]*(-1), dataRF$GE[28:80]*(-1))
democData <- data.frame(dataRF$GI[28:80], dataRF$PV[28:80], dataRF$PRR[28:80], dataRF$CLR[28:80], dataRF$GE[28:80]
INST_PCA = prcomp(democData,center = T, scale = T)
# indexDemocracy
# домножаем всё на -1, поскольку так получим PC1 как индекс демократии
# democData <- data.frame(dataRF$GI[28:80]*(-1), dataRF$PV[28:80]*(-1), dataRF$PRR[28:80]*(-1), dataRF$CLR[28:80]*(-1), dataRF$GE[28:80]*(-1))
democData <- data.frame(dataRF$GI[28:80], dataRF$PV[28:80], dataRF$PRR[28:80], dataRF$CLR[28:80], dataRF$GE[28:80])
colnames(democData) <- c("GI", "PV", "PRR", "CLR", "GE")
INST_PCA = prcomp(democData,center = T, scale = T)
dataRF$indexDemocracy = c(rep(NA, 27), INST_PCA$x[,1], rep(NA, 7))
biplot(INST_PCA, xlabs = c(rep("*", nrow(INST_PCA$x))), col = c("#233f71","#c00000"), main="indexDemocracy")
